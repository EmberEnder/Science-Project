import math
import time

print("For reference, this code was made with a tutorial, as I am nowhere near skilled enough to do this on my own yet, so please don't believe I did this without any help at all")

class Player():
    def _init_(self, letter):
        self.letter = letter

        def gain_move(self, game):
            pass


class HumanoidPlayer(Player):
    def _init_(self, letter):
        super()._init_(letter)

        def gain_move(self, game):
            valid_square = False
            val = None
            while not valid_square:
                square = input(self.letter + '\'s turn. Input move (0-9): ')
                try:
                    val = int(square)
                    if val not in game.available_moves():
                        raise ValueError
                    valid_square = True
                except ValueError:
                    print('Invalid square. Try again.')
            return val



class IntelligentAI(Player):
    def _init_(self, letter):
        super()._init_(letter)

        def gain_move(self, game):
            if len(game.available_moves()) == 9:
                square = random.choice(game.available_moves())
            else:
                square - self.minimax(game, self.letter)['position']
            return square

        def minimax(self, state, player):
            max_player - self.letter #It's you, okay
            other_player = '0' if player == 'X' else 'X'

            #Did previous move win? We shall see
            if state.current_winner == other_player:
                return {'position': None, 'score': 1 * (state.num_empty_squares() + 1) if other_player == max_player else -1 * (
                            state.num_empty_squares() + 1)}
            elif not state.empty_squares():
                return {'position': None, 'score': 0}
            if player == max_player:
                best = {'position': None, 'score': -math.inf} #Maximize each score should do
            else:
                best = {'position': None, 'score': math.inf} #Minimize should each score
            for possible_move in state.available_moves():
                state.make_move(possible_move, player)
                sim_score = self.minimax(state, other_player) #Simulate game after making move

                #undo move
                state.board[possible_move] = ' '
                state.current_winner = None
                sim_score['position'] = possible_move #Represents optimal next move

                if player == max_player: #X would be max player
                        if sim_score['score'] > bext['score']:
                            best = sim_score
                else:
                    if sim_score['score'] < best['score']:
                        best = sim_score
            return best



class TicTacToe():
    def _init_(self):
        self.board = self.make_board()
        self.current_winner = None

    @staticmethod
    def make_board():
        return [' ' for _ in range(9)]

    def print_board(self):
        for row in [self.board[i*3:(i+1) * 3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')

    @staticmethod
    def print_board_numbers():
        #Like the spaces 0 | 1 | 2, that stuff
        number_board = [[str(i) for i in range(j*3, (j+1)*3)] for j in range(3)]
        for row in number_board:
            print('| ' + ' | '.join(row) + ' |')

    def make_move(self, square, letter):
        if self.board[square] == ' ':
            self.board[square] = letter
            if self.winner(square, letter):
                self.current_winner = letter
            return True
        return False
    def winner(self, square, letter):
        #Shall check the row
        row_ind = math.floor(square / 3)
        row = self.board[row_ind*3:(row_ind+1)*3]
        #prints ('row', row) so it makes the boards rows
        if all([s == letter for s in row]):
            return True
        col_ind = square % 3
        column = [self.board[col_ind+i*3] for i in range(3)]
        # prints( 'col', column)
        if all([s == letter for s in column]):
            return True
        if square % 2 == 0:
            diagonal1 = [self.board[i] for i in[0, 4, 8]]
            # prints( 'diag1', diagonal1)
            if all([s == letter for s in diagonal1]):
                return True
            diagonal2 = [self.board[i] for i in [2, 4, 6]]
            # prints ( 'diag2', diagonal2)
            if all([s == letter for s in diagonal2]):
                return True
            return False

    def empty_squares(self):
        return ' ' in self.board

    def num_empty_squares(self):
        return self.board.count(' ')

    def available_moves(self):
        return [i for i, x in enumerate(self.board) if x == " "]

def play(game, x_player, o_player, print_game=True):

    if print_game:
        game.print_board_numbers()

    letter = 'X'
    while game.empty_squares():
        if letter == 'O':
            square = o_player.get_move(game)
        else:
            square = x_player.get_move(game)
        if game.make_move(square, letter):

            if print_game:
                print(letter + ' makes a move to square {}'.format(square))
                game.print_board()
                print('')

            if game.current_winner:
                if print_game:
                    print(letter + ' wins!')
                return letter #ends loop, and shall exit you out of this game
            letter = 'O' if letter == 'X' else 'X' #switches thy player

        time.sleep(.8)
    if print_game:
        print('It\'s a tie!')



if __name__ == '__main__':
    x_player = IntelligentAI()
    o_player = HumanoidPlayer()
    t = TicTacToe()
    play(t, x_player, o_player, print_game=True)
